@page "/dinevagter"
@using festivalprojekt.Client.Services;
@using festivalprojekt.Shared.Models;
@using System;
@using System.Globalization;

<!-- Injecter Blazors navigation manager, Nuget pakket LocalStorage og AppStatus -->
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppStatus AppState

<PageTitle>Dine vagter</PageTitle>

<div class="d-flex justify-content-center">
    <h3> <u> Dine vagter </u> </h3>
</div>

<!--Knap til hjem-->
<button class="btn btn-dark" @onclick="@HomePage">Home</button>

<!--Tabel oprettes med følgende navne-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Vagttype</th>
            <th>Start</th>
            <th>Slut</th>
            <th>Beskrivelse</th>
            <th>Område</th>
            <th>Slet</th>
        </tr>
    </thead>

    <!--Går igennem DineVagterListe og fylder tabel ud-->
    <tbody>
        @foreach (var vagt in DineVagterListe)
        {
            <tr>
                <td>@vagt.VagtTypeNavn</td>
                <td>@vagt.StartTid.ToString("dd. MMMM H:mm", new CultureInfo("da-DK"))</td>
                <td>@vagt.SlutTid.ToString("dd. MMMM H:mm", new CultureInfo("da-DK"))</td>
                <td>@vagt.VagtTypeBeskrivelse</td>
                <td>@vagt.VagtTypeOmråde</td>
                <!--Knap til afmelde vagt-->
                <td><button @onclick="() => AfmeldVagt(vagt)" class="btn delete"><span class="oi oi-trash"></span></button></td>
            </tr>
        }
    </tbody>
</table>

@code {

    //Variabler
    public PersonDTO Person = new PersonDTO();
    public BookVagtDTO wrapper = new BookVagtDTO();
    public int ErrorCode { get; set; }

    //Local storage
    public int rolle_id;
    public int person_id;

    //Lister
    public List<VagtView> DineVagterListe = new List<VagtView>();
    
    //Service 
    [Inject]
    public IVagtService Service { get; set; }

    /* Er man er logget ind bruges localStorage via RolleId og PersonId til at huske brugeren som er logget ind
       og dermed hentes alle personlige vagter på PERSONLIG og person_id.

       Hvis man ikke er logget ind (rolle_id == 0) føres man til LoginPage.
    */
    protected override async Task OnInitializedAsync()
    {
        rolle_id = await localStorage.GetItemAsync<int>("RolleId");
        person_id = await localStorage.GetItemAsync<int>("PersonId");

        if (rolle_id == 0)
        {
            LoginPage();
        }
        else
        {
            //AppState sætter dig til at være logget ind
            AppState.OnChange += StateHasChanged;
            AppState.Log(true);
            DineVagterListe = (await Service.HentAlleVagter("PERSONLIG", person_id)).ToList();
        }
    }

    /*
    Wrapper er et objekt af BookVagtDTO klassen med PersonId og VagtId.

    Grunden til vi sætter PersonId til 0 er for at signalere til repository at vagten skal afmeldes(PersonId = NULL i SQL).

    DineVagterListe.RemoveAll tjekker om vagten findes nogle steder på DineVagterListe - hvis den findes fjernes den fra den lokale liste.
    */
    public async void AfmeldVagt(VagtView Vagt)
    {
        wrapper.PersonId = 0;
        wrapper.VagtId = Vagt.VagtId;
        ErrorCode = await Service.BookVagt(wrapper);
        DineVagterListe.RemoveAll(x => x == Vagt);
        StateHasChanged();
    }

    //Navigere tilbage til Home
    public void HomePage()
    {
        NavigationManager.NavigateTo("/home");
    }

    //Navigere tilbage til Login
    public void LoginPage()
    {
        NavigationManager.NavigateTo("/");
    }
}
