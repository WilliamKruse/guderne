@page "/opdatervagttype"
@using festivalprojekt.Client.Services;
@using festivalprojekt.Shared.Models;
@using System;

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppStatus AppState
@implements IDisposable

<PageTitle>Opdater vagttype</PageTitle>
<div class="d-flex justify-content-center">
    <h3>Opdater vagttype</h3>

</div>

<button class="button" @onclick="@OverblikPage">Tilbage</button>

<div class="col-sm-6">
    <!--sticky top gør at dens position forbliver på skærmen når man scroller-->
    <div class="sticky-top">
        <!--editform er en del af blazor, edit context skal være med, da den prøver at følge formen på et objekt-->
        <EditForm EditContext="@EditContext" class="row p-3" OnValidSubmit="() => OpdaterVagtTypeHandler(this.NyVagtType)" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="col-md-12 mb-3">
                <label>Vælg staus</label>
                <InputSelect id="status" @bind-Value="TempStatusId" class="form-control">
                    @foreach (var status in AlleStatus)
                    {
                        <option value="@status.StatusId"> @status.StatusNavn</option>
                    }
                </InputSelect>

            </div>
            <div class="col-md-12 mb-3">
                <label>Vagttype navn</label>
                <InputText id="vagttypenavn" @bind-Value="NyVagtType.VagtTypeNavn" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeNavn)" />
            </div>
            <div class="col-md-12 mb-3">
                <label>Beskrivelse</label>
                <InputText id="vagttypebeskrivelse" @bind-Value="NyVagtType.VagtTypeBeskrivelse" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeBeskrivelse)" />
            </div>
            <div class="col-md-12 mb-3">
                <label>Område</label>
                <InputText id="tlf" @bind-Value="NyVagtType.VagtTypeOmråde" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeOmråde)" />
            </div>
            <div class="col-12 mb-6">
                <button type="submit" class="btn btn-primary">Opdater vagttype</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private EditContext EditContext;
    public VagtTypeDTO NyVagtType = new VagtTypeDTO();
    public List<VagtTypeDTO> vagtTypeListe = new List<VagtTypeDTO>();
    public Overblik overblik;
    public int ErrorCode { get; set; }
    public int rolle_id;
    public int vagtType_id;
    public List<Status> AlleStatus = new List<Status>();
    public int TempStatusId = 1;

    //Injecter Service så vi kan bruge metoderne derfra.
    [Inject]
    public IVagtTypeService Service { get; set; }

    protected override async Task OnInitializedAsync()
    {
        rolle_id = await localStorage.GetItemAsync<int>("RolleId");

        if (rolle_id == 0)
        {
            LoginPage();
        }
        else
        {
            AppState.OnChange += StateHasChanged;
            AppState.Log(true);
            AlleStatus = (await Service.HentAlleStatus()).ToList();

            vagtType_id = await localStorage.GetItemAsync<int>("VagtTypeId");

            vagtTypeListe = (await Service.HentAlleVagtTyper()).ToList();
            foreach (var item in vagtTypeListe)
            {
                if (item.VagtTypeID.Value == vagtType_id)
                {
                    NyVagtType = item;
                    break;
                }
            }
        }
    }

    //laver ny edit context objekt når siden starter, modelerer ud fra objektet NyVagtType
    protected override void OnInitialized()
    {
        EditContext = new EditContext(NyVagtType);
    }

    //opdaterer vagttypen, clearer editform og går tilbage til Overblik.razor
    public async void OpdaterVagtTypeHandler(VagtTypeDTO NyVagtType)
    {
        ErrorCode = await Service.OpdaterVagtType(NyVagtType);
        NyVagtType = new VagtTypeDTO();
        EditContext = new EditContext(NyVagtType);
        OverblikPage();
        Console.WriteLine("Vagttype tilføjet: return code: " + ErrorCode);
    }

    //metode hvis bruger indtaster invalid data, kommer kun i console.
    public void HandleInvalidSubmit()
    {
        Console.WriteLine("Det er invalid data");
    }

    //metode til at blive sendt tilbage til Overblik.razor
    public void OverblikPage()
    {
        NavigationManager.NavigateTo("/overblikkoordinator");
    }

    //metode til at blive sendt tilbage til Login.razor
    public void LoginPage()
    {
        NavigationManager.NavigateTo("/");
    }
    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}

