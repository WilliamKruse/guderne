@page "/opretvagttype"
@using festivalprojekt.Client.Services;
@using festivalprojekt.Shared.Models;
@using System;

<!-- Injecter Blazors navigation manager, Nuget pakket LocalStorage og AppStatus -->
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppStatus AppState

<PageTitle>Opret vagttype</PageTitle>

<div class="d-flex justify-content-center">
    <h3> <u> Opret vagttype </u> </h3>
</div>

<div class="col-sm-6">
    <!--sticky top gør at dens position forbliver på skærmen når man scroller-->
    <div class="sticky-top">
        <!--edit context skal være med, da den prøver at følge formen på et objekt-->
        <EditForm EditContext="@EditContext" class="row p-3"
                  OnValidSubmit="() => TilføjVagtTypeHandler(NyVagtType)" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="col-12 pb-3">
                <button class="btn btn-dark" @onclick="@OverblikPage">Tilbage</button>
            </div>

            <!--Fylder InputSelect ud med de status der er i databasen-->
            <div class="col-md-12 mb-3">
                <label>Vælg status</label>
                <InputSelect id="status" @bind-Value="ValgtStatusId" class="form-control">
                    @foreach (var status in AlleStatus)
                    {
                        <option value="@status.StatusId"> @status.StatusNavn</option>
                    }
                </InputSelect>
            </div>

            <!--Opretter et tomt felt til vagttype navn og binder den til det object man er ved at oprette(vagttype) på fra VagtTypeDTO-->
            <div class="col-md-12 mb-3">
                <label>Vagttype navn</label>
                <InputText id="vagttypenavn" @bind-Value="NyVagtType.VagtTypeNavn" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeNavn)" />
            </div>

            <!--Opretter et tomt felt til vagttype beskrivelse og binder den til det object man er ved at oprette(vagttype) på fra VagtTypeDTO-->
            <div class="col-md-12 mb-3">
                <label>Beskrivelse</label>
                <InputText id="vagttypebeskrivelse" @bind-Value="NyVagtType.VagtTypeBeskrivelse" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeBeskrivelse)" />
            </div>

            <!--Opretter et tomt felt til vagttype område og binder den til det object man er ved at oprette(vagttype) på fra VagtTypeDTO-->
            <div class="col-md-12 mb-3">
                <label>Område</label>
                <InputText id="tlf" @bind-Value="NyVagtType.VagtTypeOmråde" class="form-control" />
                <ValidationMessage For="@(() => NyVagtType.VagtTypeOmråde)" />
            </div>

            <!--Knap til at oprette vagttype-->
            <div class="col-12 mb-6">
                <button type="submit" class="btn btn-dark">Opret vagttype</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    //Variabler
    private EditContext EditContext;
    public VagtTypeDTO NyVagtType = new VagtTypeDTO();
    public int ValgtStatusId = 1;
    public int ErrorCode { get; set; }
   
    //Local storage 
    public int rolle_id;

    //Lister
    public List<Status> AlleStatus = new List<Status>();

    //Injecter Service så vi kan bruge metoderne derfra.
    [Inject]
    public IVagtTypeService Service { get; set; }

    //Hvis man ikke er logget ind, bliver man sendt til Login. Liste med status bliver fyldt ud.
    protected override async Task OnInitializedAsync()
    {
        rolle_id = await localStorage.GetItemAsync<int>("RolleId");

        if (rolle_id == 0)
        {
            LoginPage();
        }
        else
        {
            //AppState sætter dig til at være logget ind
            AppState.OnChange += StateHasChanged;
            AppState.Log(true);
            AlleStatus = (await Service.HentAlleStatus()).ToList();
        }
    }

    //Laver ny edit context objekt når siden starter, modelerer ud fra objektet NyVagtType
    protected override void OnInitialized()
    {
        EditContext = new EditContext(NyVagtType);
    }

    //Opretter ny vagttype gennem servicen, clearer felterne og sender tilbage til Overblik.razor
    public async Task TilføjVagtTypeHandler(VagtTypeDTO NyVagtType)
    {
        NyVagtType.StatusId = ValgtStatusId;
        ErrorCode = await Service.OpretVagtType(NyVagtType);
        NyVagtType = new VagtTypeDTO();
        EditContext = new EditContext(NyVagtType);
        OverblikPage();
    }

    //metoder hvis bruger indtaster invalid data, kommer kun i console.
    public void HandleInvalidSubmit()
    {
        Console.WriteLine("Det er invalid data");
    }

    //Metode til at blive sendt tilbage til Overblik.razor
    public void OverblikPage()
    {
        NavigationManager.NavigateTo("/overblikkoordinator");
    }

    //Metode til at blive sendt tilbage til Login.razor
    public void LoginPage()
    {
        NavigationManager.NavigateTo("/");
    }
}
