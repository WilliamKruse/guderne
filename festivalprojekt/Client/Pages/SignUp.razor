@page "/po"
@using festivalprojekt.Shared.Models;
@using festivalprojekt.Client.Services;
@using System;

<PageTitle>SignUp</PageTitle>
<div class="d-flex justify-content-center"></div>
            
                <h3>Personlige Oplysninger</h3>
                <!--editform er en del af blazor, edit context skal være med, da den prøver at følge formen på en objekt-->
                <EditForm EditContext="@EditContext" class="row p-3" OnValidSubmit="@OpretPerson" OnInvalidSubmit="@HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                   

                        <div class="radioButtons">
                            @foreach (var rolle in RolleList)
                           {
                               <label for="@rolle.RolleNavn">@rolle.RolleNavn</label>
                               <input type ="radio" id="@rolle.RolleNavn" checked="checked" name="radio" @bind-value="RolleValgt"/>
                            
                           }
                        </div>
                      
                 

                    <div class="col-md-12 mb-3">
                        <label>Fornavn</label>
                        <InputText id="navn" @bind-Value="NytSignUp.Fornavn" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.Fornavn)" />
                    </div>

                    <div class="col-md-12 mb-3">
                        <label>Efternavn</label>
                        <InputText id="navn" @bind-Value="NytSignUp.Efternavn" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.Efternavn)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label>Fødselsdato</label>
                        <InputDate id="fødselsdato" @bind-Value="NytSignUp.RealF" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.RealF)" />
                    </div>

                    <div class="col-md-12 mb-3">
                        <label>Email</label>
                        <InputText id="email" @bind-Value="NytSignUp.Email" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.Email)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label>Telefon</label>
                        <InputText id="tlf" @bind-Value="NytSignUp.Telefon" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.Telefon)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label>Angiv dit kodeord</label>
                        <InputText id="kodeord" @bind-Value="NytSignUp.Kodeord" class="form-control" />
                        <ValidationMessage For="@(() => NytSignUp.Kodeord)" />
                    </div>

                      <h3>Kompetencer</h3>
                <!--laver en list med alle items i vores shelterlist-->
                @foreach (var item in KompetenceList)
                {
                        <ul>
                            <li>
                                <p>
                                    <!--tilgår attributten kompetence navn i personDTO klassen -->
                                    @item.KompetenceNavn
                                    <input type ="checkbox" @bind="item.Checker" />
                                </p>
                            </li>
                        </ul>
                    
                }
               

                    <div class="col-12 mb-6" style="text-align:right">
                        <button type="submit" class="btn btn-primary">Opret</button>
                </div>
                </EditForm>
       
             

        <!--Hvis errorcode er 200 kommer en valideringsbesked frem-->
        @if (ErrorCode == 200)
        {
            <div class="alert alert-success" role="alert">
                <strong>Succes!</strong> Den nye vagttype er registreret i systemet.
            </div>
        }




@code {

    private EditContext EditContext;
    public PersonDTO NytSignUp = new PersonDTO();
    public int ErrorCode { get; set; }
    public bool RolleValgt { get; set; }

    //Liste med kompetencer
    public List<Kompetencer> KompetenceList = new List<Kompetencer>();

    //Liste med roller
    public List<Roller> RolleList = new List<Roller>();


    [Inject]
    public IPersonService Service { get; set; }

    //Henter alle personer
    protected override async Task OnInitializedAsync()
    {
        KompetenceList = (await Service.HentAlleKompetencer()).ToList();
        RolleList = (await Service.HentAlleRoller()).ToList();

    }

    //laver ny edit context objekt når siden starter, modelerer ud fra objektet CurrentBooking
    protected override void OnInitialized()
    {
        EditContext = new EditContext(NytSignUp);
    }

    //Sender OpretPerson videre til servicen og renser alt data så vi starter forfra.
    public async Task OpretPerson()
    {
        Console.WriteLine("nu");
        ValgteKompetencer();
        Console.WriteLine("1");
        ValgtRolle();
        Console.WriteLine("2");
        var personData = NytSignUp;

        Console.WriteLine(personData.ToString());

        ErrorCode = await Service.OpretPerson(personData);
       // NytSignUp = new PersonDTO();
      //  EditContext = new EditContext(NytSignUp);
        Console.WriteLine("SignUp added: return code: " + ErrorCode);
    }

    //metoder hvis bruger indtaster invalid data, kommer kun i console.
    public void HandleInvalidSubmit()
    {
        Console.WriteLine("Hey det er invalid data");
    }
/*
    public async void OpretPersonHandler(PersonDTO person)
    {
        ValgteKompetencer();
        ValgtRolle();
        ErrorCode = await Service.OpretPerson(person);
    }
*/
    public void ValgteKompetencer ()
    {
        List<int> id = new List<int>();
        List<string> navn = new List<string> (); 

        foreach (var item in KompetenceList)
        {
            if (item.Checker)
            {
                id.Add(item.KompetenceId);
                navn.Add(item.KompetenceNavn);
            }
        }
        NytSignUp.KompetenceId = id.ToArray(); 
        NytSignUp.KompetenceNavn = navn.ToArray(); 
    }

    public void ValgtRolle()
    {
        int RolleId = 0;
        foreach (var rolle in RolleList)
        {
            if (RolleValgt)
            {
                RolleId = rolle.RolleId;
            }
        }

        NytSignUp.RolleId = RolleId;
    }
}