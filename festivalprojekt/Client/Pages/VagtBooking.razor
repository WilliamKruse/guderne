@page "/ledigevagter"
@using festivalprojekt.Client.Services;
@using festivalprojekt.Shared.Models;
@using System;
@using System.Globalization;

<!-- Injecter Blazors navigation manager, Nuget pakket LocalStorage og AppStatus -->
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppStatus AppState

<PageTitle>Vagtbooking</PageTitle>

<div class="d-flex justify-content-center">
    <h3> <u> Book vagter </u> </h3>
</div>

<!--Knap til home-->
<button class="btn btn-dark" @onclick="@HomePage">Home</button>

<!--Laver tabel-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Vagttype</th>
            <th>Start</th>
            <th>Slut</th>
            <th>Beskrivelse</th>
            <th>Område</th>
            <th>Book</th>
        </tr>
    </thead>

    <!--går igennem ledigevagterliste og udfylder tabel-->
    <tbody>
        @foreach (var vagt in LedigeVagterListe)
        {
            <tr>
                <td>@vagt.VagtTypeNavn</td>
                <td>@vagt.StartTid.ToString("dd. MMMM H:mm", new CultureInfo("da-DK"))</td>
                <td>@vagt.SlutTid.ToString("dd. MMMM H:mm", new CultureInfo("da-DK"))</td>
                <td>@vagt.VagtTypeBeskrivelse</td>
                <td>@vagt.VagtTypeOmråde</td>
                <td><button class="btn btn-dark btn-sm" @onclick="() => BookVagt(vagt)">Book</button></td>
            </tr>
        }
    </tbody>
</table>

@code {

    //Variabler
    public BookVagtDTO Wrapper = new BookVagtDTO();
    public int ErrorCode { get; set; }

    //Local stoage 
    public int rolle_id = 1;
    public int person_id = 1;

    //Lister 
    public List<VagtView> LedigeVagterListe = new List<VagtView>();

    //Service
    [Inject]
    public IVagtService Service { get; set; }

    //Henter alle ledige vagter
    protected override async Task OnInitializedAsync()
    {
        rolle_id = await localStorage.GetItemAsync<int>("RolleId");
        person_id = await localStorage.GetItemAsync<int>("PersonId");

        if (rolle_id == 0)
        {
            LoginPage();
        }
        else
        {
            //AppState sætter dig til at være logget ind
            AppState.OnChange += StateHasChanged;
            AppState.Log(true);
            LedigeVagterListe = (await Service.HentAlleVagter("LEDIGE", 0)).ToList();
        }
    }

    //første del af metoden (ved ErrorCode) sletter valgte vagt på vagtId
    public async void BookVagt(VagtView Vagt)
    {
        Wrapper.PersonId = person_id;
        Wrapper.VagtId = Vagt.VagtId;
        ErrorCode = await Service.BookVagt(Wrapper);
        LedigeVagterListe.RemoveAll(x => x == Vagt);
        //LedigeVagterListe = (await Service.HentAlleVagter("LEDIGE", 0)).ToList();
        StateHasChanged();
    }

    //Naviger tilbage til Home
    public void HomePage()
    {
        NavigationManager.NavigateTo("/home");
    }

    //Naviger tilbage til Login
    public void LoginPage()
    {
        NavigationManager.NavigateTo("/");
    }  
}


